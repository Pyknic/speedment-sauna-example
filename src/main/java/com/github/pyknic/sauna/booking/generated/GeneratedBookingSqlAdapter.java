package com.github.pyknic.sauna.booking.generated;

import com.github.pyknic.sauna.booking.Booking;
import com.github.pyknic.sauna.booking.BookingImpl;
import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.sql.SqlPersistenceComponent;
import com.speedment.runtime.core.component.sql.SqlStreamSupplierComponent;
import com.speedment.runtime.core.exception.SpeedmentException;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.annotation.Generated;
import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * com.github.pyknic.sauna.booking.Booking} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedBookingSqlAdapter {
    
    private final TableIdentifier<Booking> tableIdentifier;
    
    protected GeneratedBookingSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("db0", "sauna", "booking");
    }
    
    @ExecuteBefore(RESOLVED)
    void installMethodName(SqlStreamSupplierComponent streamSupplierComponent, SqlPersistenceComponent persistenceComponent) {
        streamSupplierComponent.install(tableIdentifier, this::apply);
        persistenceComponent.install(tableIdentifier);
    }
    
    protected Booking apply(ResultSet resultSet) throws SpeedmentException{
        final Booking entity = createEntity();
        try {
            entity.setId(resultSet.getLong(1));
            entity.setBookingId(resultSet.getLong(2));
            entity.setEventType(resultSet.getString(3));
            entity.setTenant(getInt(resultSet, 4));
            entity.setSauna(getInt(resultSet, 5));
            entity.setBookedFrom(getDate(resultSet, 6));
            entity.setBookedTo(getDate(resultSet, 7));
        } catch (final SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    protected BookingImpl createEntity() {
        return new BookingImpl();
    }
}