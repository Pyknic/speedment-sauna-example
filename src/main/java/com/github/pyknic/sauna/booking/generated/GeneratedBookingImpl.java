package com.github.pyknic.sauna.booking.generated;

import com.github.pyknic.sauna.booking.Booking;
import com.speedment.runtime.core.util.OptionalUtil;
import java.sql.Date;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;
import javax.annotation.Generated;

/**
 * The generated base implementation of the {@link
 * com.github.pyknic.sauna.booking.Booking}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedBookingImpl implements Booking {
    
    private long id;
    private long bookingId;
    private String eventType;
    private Integer tenant;
    private Integer sauna;
    private Date bookedFrom;
    private Date bookedTo;
    
    protected GeneratedBookingImpl() {
        
    }
    
    @Override
    public long getId() {
        return id;
    }
    
    @Override
    public long getBookingId() {
        return bookingId;
    }
    
    @Override
    public String getEventType() {
        return eventType;
    }
    
    @Override
    public OptionalInt getTenant() {
        return OptionalUtil.ofNullable(tenant);
    }
    
    @Override
    public OptionalInt getSauna() {
        return OptionalUtil.ofNullable(sauna);
    }
    
    @Override
    public Optional<Date> getBookedFrom() {
        return Optional.ofNullable(bookedFrom);
    }
    
    @Override
    public Optional<Date> getBookedTo() {
        return Optional.ofNullable(bookedTo);
    }
    
    @Override
    public Booking setId(long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Booking setBookingId(long bookingId) {
        this.bookingId = bookingId;
        return this;
    }
    
    @Override
    public Booking setEventType(String eventType) {
        this.eventType = eventType;
        return this;
    }
    
    @Override
    public Booking setTenant(Integer tenant) {
        this.tenant = tenant;
        return this;
    }
    
    @Override
    public Booking setSauna(Integer sauna) {
        this.sauna = sauna;
        return this;
    }
    
    @Override
    public Booking setBookedFrom(Date bookedFrom) {
        this.bookedFrom = bookedFrom;
        return this;
    }
    
    @Override
    public Booking setBookedTo(Date bookedTo) {
        this.bookedTo = bookedTo;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = " + Objects.toString(getId()));
        sj.add("bookingId = " + Objects.toString(getBookingId()));
        sj.add("eventType = " + Objects.toString(getEventType()));
        sj.add("tenant = " + Objects.toString(OptionalUtil.unwrap(getTenant())));
        sj.add("sauna = " + Objects.toString(OptionalUtil.unwrap(getSauna())));
        sj.add("bookedFrom = " + Objects.toString(OptionalUtil.unwrap(getBookedFrom())));
        sj.add("bookedTo = " + Objects.toString(OptionalUtil.unwrap(getBookedTo())));
        return "BookingImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Booking)) { return false; }
        final Booking thatBooking = (Booking)that;
        if (this.getId() != thatBooking.getId()) {return false; }
        if (this.getBookingId() != thatBooking.getBookingId()) {return false; }
        if (!Objects.equals(this.getEventType(), thatBooking.getEventType())) {return false; }
        if (!Objects.equals(this.getTenant(), thatBooking.getTenant())) {return false; }
        if (!Objects.equals(this.getSauna(), thatBooking.getSauna())) {return false; }
        if (!Objects.equals(this.getBookedFrom(), thatBooking.getBookedFrom())) {return false; }
        if (!Objects.equals(this.getBookedTo(), thatBooking.getBookedTo())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Long.hashCode(getId());
        hash = 31 * hash + Long.hashCode(getBookingId());
        hash = 31 * hash + Objects.hashCode(getEventType());
        hash = 31 * hash + Objects.hashCode(getTenant());
        hash = 31 * hash + Objects.hashCode(getSauna());
        hash = 31 * hash + Objects.hashCode(getBookedFrom());
        hash = 31 * hash + Objects.hashCode(getBookedTo());
        return hash;
    }
}