package com.github.pyknic.sauna.database.sauna.booking.generated;

import com.github.pyknic.sauna.database.sauna.booking.Booking;
import com.speedment.Entity;
import com.speedment.config.db.mapper.identity.DateIdentityMapper;
import com.speedment.config.db.mapper.identity.IntegerIdentityMapper;
import com.speedment.config.db.mapper.identity.LongIdentityMapper;
import com.speedment.config.db.mapper.identity.StringIdentityMapper;
import com.speedment.field.ComparableField;
import com.speedment.field.FieldIdentifier;
import com.speedment.field.StringField;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.StringFieldImpl;
import java.sql.Date;
import java.util.Optional;
import javax.annotation.Generated;

/**
 * The generated base interface representing an entity (for example, a row)
 * in the Table sauna.db0.sauna.booking.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface GeneratedBooking extends Entity<Booking> {
    
    /**
     * This Field corresponds to the {@link Booking} field that can be obtained
     * using the {@link Booking#getId()} method.
     */
    final ComparableField<Booking, Long, Long> ID = new ComparableFieldImpl<>(Identifier.ID, Booking::getId, Booking::setId, new LongIdentityMapper(), true);
    /**
     * This Field corresponds to the {@link Booking} field that can be obtained
     * using the {@link Booking#getBookingId()} method.
     */
    final ComparableField<Booking, Long, Long> BOOKING_ID = new ComparableFieldImpl<>(Identifier.BOOKING_ID, Booking::getBookingId, Booking::setBookingId, new LongIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Booking} field that can be obtained
     * using the {@link Booking#getEventType()} method.
     */
    final StringField<Booking, String> EVENT_TYPE = new StringFieldImpl<>(Identifier.EVENT_TYPE, Booking::getEventType, Booking::setEventType, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Booking} field that can be obtained
     * using the {@link Booking#getTenant()} method.
     */
    final ComparableField<Booking, Integer, Integer> TENANT = new ComparableFieldImpl<>(Identifier.TENANT, o -> o.getTenant().orElse(null), Booking::setTenant, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Booking} field that can be obtained
     * using the {@link Booking#getSauna()} method.
     */
    final ComparableField<Booking, Integer, Integer> SAUNA = new ComparableFieldImpl<>(Identifier.SAUNA, o -> o.getSauna().orElse(null), Booking::setSauna, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Booking} field that can be obtained
     * using the {@link Booking#getBookedFrom()} method.
     */
    final ComparableField<Booking, Date, Date> BOOKED_FROM = new ComparableFieldImpl<>(Identifier.BOOKED_FROM, o -> o.getBookedFrom().orElse(null), Booking::setBookedFrom, new DateIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Booking} field that can be obtained
     * using the {@link Booking#getBookedTo()} method.
     */
    final ComparableField<Booking, Date, Date> BOOKED_TO = new ComparableFieldImpl<>(Identifier.BOOKED_TO, o -> o.getBookedTo().orElse(null), Booking::setBookedTo, new DateIdentityMapper(), false);
    
    /**
     * Returns the id of this Booking. The id field corresponds to the database
     * column db0.sauna.booking.id.
     * 
     * @return the id of this Booking
     */
    Long getId();
    
    /**
     * Returns the bookingId of this Booking. The bookingId field corresponds to
     * the database column db0.sauna.booking.booking_id.
     * 
     * @return the bookingId of this Booking
     */
    Long getBookingId();
    
    /**
     * Returns the eventType of this Booking. The eventType field corresponds to
     * the database column db0.sauna.booking.event_type.
     * 
     * @return the eventType of this Booking
     */
    String getEventType();
    
    /**
     * Returns the tenant of this Booking. The tenant field corresponds to the
     * database column db0.sauna.booking.tenant.
     * 
     * @return the tenant of this Booking
     */
    Optional<Integer> getTenant();
    
    /**
     * Returns the sauna of this Booking. The sauna field corresponds to the
     * database column db0.sauna.booking.sauna.
     * 
     * @return the sauna of this Booking
     */
    Optional<Integer> getSauna();
    
    /**
     * Returns the bookedFrom of this Booking. The bookedFrom field corresponds
     * to the database column db0.sauna.booking.booked_from.
     * 
     * @return the bookedFrom of this Booking
     */
    Optional<Date> getBookedFrom();
    
    /**
     * Returns the bookedTo of this Booking. The bookedTo field corresponds to
     * the database column db0.sauna.booking.booked_to.
     * 
     * @return the bookedTo of this Booking
     */
    Optional<Date> getBookedTo();
    
    /**
     * Sets the id of this Booking. The id field corresponds to the database
     * column db0.sauna.booking.id.
     * 
     * @param id to set of this Booking
     * @return this Booking instance
     */
    Booking setId(Long id);
    
    /**
     * Sets the bookingId of this Booking. The bookingId field corresponds to the
     * database column db0.sauna.booking.booking_id.
     * 
     * @param bookingId to set of this Booking
     * @return this Booking instance
     */
    Booking setBookingId(Long bookingId);
    
    /**
     * Sets the eventType of this Booking. The eventType field corresponds to the
     * database column db0.sauna.booking.event_type.
     * 
     * @param eventType to set of this Booking
     * @return this Booking instance
     */
    Booking setEventType(String eventType);
    
    /**
     * Sets the tenant of this Booking. The tenant field corresponds to the
     * database column db0.sauna.booking.tenant.
     * 
     * @param tenant to set of this Booking
     * @return this Booking instance
     */
    Booking setTenant(Integer tenant);
    
    /**
     * Sets the sauna of this Booking. The sauna field corresponds to the
     * database column db0.sauna.booking.sauna.
     * 
     * @param sauna to set of this Booking
     * @return this Booking instance
     */
    Booking setSauna(Integer sauna);
    
    /**
     * Sets the bookedFrom of this Booking. The bookedFrom field corresponds to
     * the database column db0.sauna.booking.booked_from.
     * 
     * @param bookedFrom to set of this Booking
     * @return this Booking instance
     */
    Booking setBookedFrom(Date bookedFrom);
    
    /**
     * Sets the bookedTo of this Booking. The bookedTo field corresponds to the
     * database column db0.sauna.booking.booked_to.
     * 
     * @param bookedTo to set of this Booking
     * @return this Booking instance
     */
    Booking setBookedTo(Date bookedTo);
    
    enum Identifier implements FieldIdentifier<Booking> {
        
        ID ("id"),
        BOOKING_ID ("booking_id"),
        EVENT_TYPE ("event_type"),
        TENANT ("tenant"),
        SAUNA ("sauna"),
        BOOKED_FROM ("booked_from"),
        BOOKED_TO ("booked_to");
        
        private final String columnName;
        
        Identifier(String columnName) {
            this.columnName = columnName;
        }
        
        @Override
        public String dbmsName() {
            return "db0";
        }
        
        @Override
        public String schemaName() {
            return "sauna";
        }
        
        @Override
        public String tableName() {
            return "booking";
        }
        
        @Override
        public String columnName() {
            return this.columnName;
        }
    }
}