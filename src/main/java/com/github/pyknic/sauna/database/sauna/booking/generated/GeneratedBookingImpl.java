package com.github.pyknic.sauna.database.sauna.booking.generated;

import com.github.pyknic.sauna.database.sauna.booking.Booking;
import com.speedment.Speedment;
import com.speedment.internal.core.code.AbstractBaseEntity;
import java.sql.Date;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import javax.annotation.Generated;

/**
 * The generated base implementation representing an entity (for example, a
 * row) in the Table sauna.db0.sauna.booking.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedBookingImpl extends AbstractBaseEntity<Booking> implements Booking {
    
    private Long id;
    private Long bookingId;
    private String eventType;
    private Integer tenant;
    private Integer sauna;
    private Date bookedFrom;
    private Date bookedTo;
    
    protected GeneratedBookingImpl() {
        
    }
    
    @Override
    public Long getId() {
        return id;
    }
    
    @Override
    public Long getBookingId() {
        return bookingId;
    }
    
    @Override
    public String getEventType() {
        return eventType;
    }
    
    @Override
    public Optional<Integer> getTenant() {
        return Optional.ofNullable(tenant);
    }
    
    @Override
    public Optional<Integer> getSauna() {
        return Optional.ofNullable(sauna);
    }
    
    @Override
    public Optional<Date> getBookedFrom() {
        return Optional.ofNullable(bookedFrom);
    }
    
    @Override
    public Optional<Date> getBookedTo() {
        return Optional.ofNullable(bookedTo);
    }
    
    @Override
    public final Booking setId(Long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public final Booking setBookingId(Long bookingId) {
        this.bookingId = bookingId;
        return this;
    }
    
    @Override
    public final Booking setEventType(String eventType) {
        this.eventType = eventType;
        return this;
    }
    
    @Override
    public final Booking setTenant(Integer tenant) {
        this.tenant = tenant;
        return this;
    }
    
    @Override
    public final Booking setSauna(Integer sauna) {
        this.sauna = sauna;
        return this;
    }
    
    @Override
    public final Booking setBookedFrom(Date bookedFrom) {
        this.bookedFrom = bookedFrom;
        return this;
    }
    
    @Override
    public final Booking setBookedTo(Date bookedTo) {
        this.bookedTo = bookedTo;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "+Objects.toString(getId()));
        sj.add("bookingId = "+Objects.toString(getBookingId()));
        sj.add("eventType = "+Objects.toString(getEventType()));
        sj.add("tenant = "+Objects.toString(getTenant().orElse(null)));
        sj.add("sauna = "+Objects.toString(getSauna().orElse(null)));
        sj.add("bookedFrom = "+Objects.toString(getBookedFrom().orElse(null)));
        sj.add("bookedTo = "+Objects.toString(getBookedTo().orElse(null)));
        return "BookingImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Booking)) { return false; }
        final Booking thatBooking = (Booking)that;
        if (!Objects.equals(this.getId(), thatBooking.getId())) {return false; }
        if (!Objects.equals(this.getBookingId(), thatBooking.getBookingId())) {return false; }
        if (!Objects.equals(this.getEventType(), thatBooking.getEventType())) {return false; }
        if (!Objects.equals(this.getTenant(), thatBooking.getTenant())) {return false; }
        if (!Objects.equals(this.getSauna(), thatBooking.getSauna())) {return false; }
        if (!Objects.equals(this.getBookedFrom(), thatBooking.getBookedFrom())) {return false; }
        if (!Objects.equals(this.getBookedTo(), thatBooking.getBookedTo())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getBookingId());
        hash = 31 * hash + Objects.hashCode(getEventType());
        hash = 31 * hash + Objects.hashCode(getTenant());
        hash = 31 * hash + Objects.hashCode(getSauna());
        hash = 31 * hash + Objects.hashCode(getBookedFrom());
        hash = 31 * hash + Objects.hashCode(getBookedTo());
        return hash;
    }
    
    @Override
    public Class<Booking> entityClass() {
        return Booking.class;
    }
}