package com.github.pyknic.sauna.database.sauna.booking.generated;

import com.github.pyknic.sauna.database.sauna.booking.Booking;
import com.github.pyknic.sauna.database.sauna.booking.BookingImpl;
import com.speedment.Speedment;
import com.speedment.exception.SpeedmentException;
import com.speedment.field.FieldIdentifier;
import com.speedment.field.trait.FieldTrait;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import com.speedment.util.tuple.Tuple1;
import com.speedment.util.tuple.Tuples;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.stream.Stream;
import javax.annotation.Generated;
import static com.speedment.internal.util.sql.ResultSetUtil.*;

/**
 * The generated base manager implementation representing an entity (for
 * example, a row) in the Table sauna.db0.sauna.booking.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedBookingManagerImpl extends AbstractSqlManager<Booking> implements GeneratedBookingManager {
    
    private final static Tuple1<Class<Long>> PRIMARY_KEY_CLASSES = Tuples.of(Long.class);
    
    protected GeneratedBookingManagerImpl(Speedment speedment) {
        super(speedment);
        setEntityMapper(this::newEntityFrom);
    }
    
    protected Booking newEntityFrom(ResultSet resultSet) throws SQLException, SpeedmentException {
        final Booking entity = newEmptyEntity();
        try {
            entity.setId(resultSet.getLong(1));
            entity.setBookingId(resultSet.getLong(2));
            entity.setEventType(resultSet.getString(3));
            entity.setTenant(getInt(resultSet, 4));
            entity.setSauna(getInt(resultSet, 5));
            entity.setBookedFrom(resultSet.getDate(6));
            entity.setBookedTo(resultSet.getDate(7));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public Booking newEmptyEntity() {
        return new BookingImpl() {
            @Override
            protected Speedment speedment() {
                return speedment;
            }
        };
    }
    
    @Override
    public Object get(Booking entity, FieldIdentifier<Booking> identifier) {
        switch ((Booking.Identifier) identifier) {
            case ID : return entity.getId();
            case BOOKING_ID : return entity.getBookingId();
            case EVENT_TYPE : return entity.getEventType();
            case TENANT : return entity.getTenant().orElse(null);
            case SAUNA : return entity.getSauna().orElse(null);
            case BOOKED_FROM : return entity.getBookedFrom().orElse(null);
            case BOOKED_TO : return entity.getBookedTo().orElse(null);
            default : throw new IllegalArgumentException("Unknown identifier '" + identifier + "'.");
        }
    }
    
    @Override
    public void set(Booking entity, FieldIdentifier<Booking> identifier, Object value) {
        switch ((Booking.Identifier) identifier) {
            case ID : entity.setId((Long) value); break;
            case BOOKING_ID : entity.setBookingId((Long) value); break;
            case EVENT_TYPE : entity.setEventType((String) value); break;
            case TENANT : entity.setTenant((Integer) value); break;
            case SAUNA : entity.setSauna((Integer) value); break;
            case BOOKED_FROM : entity.setBookedFrom((Date) value); break;
            case BOOKED_TO : entity.setBookedTo((Date) value); break;
            default : throw new IllegalArgumentException("Unknown identifier '" + identifier + "'.");
        }
    }
    
    @Override
    public Stream<FieldTrait> fields() {
        return Stream.of(
            Booking.ID,
            Booking.BOOKING_ID,
            Booking.EVENT_TYPE,
            Booking.TENANT,
            Booking.SAUNA,
            Booking.BOOKED_FROM,
            Booking.BOOKED_TO
        );
    }
    
    @Override
    public Stream<FieldTrait> primaryKeyFields() {
        return Stream.of(
            Booking.ID
        );
    }
    
    @Override
    public Tuple1<Class<Long>> getPrimaryKeyClasses() {
        return PRIMARY_KEY_CLASSES;
    }
    
    @Override
    public Booking newCopyOf(Booking source) {
        final Booking copy = new BookingImpl() {
            @Override
            protected final Speedment speedment() {
                return speedment;
            }
        };
        
        copy.setId(source.getId());
        copy.setBookingId(source.getBookingId());
        copy.setEventType(source.getEventType());
        source.getTenant().ifPresent(copy::setTenant);
        source.getSauna().ifPresent(copy::setSauna);
        source.getBookedFrom().ifPresent(copy::setBookedFrom);
        source.getBookedTo().ifPresent(copy::setBookedTo);
        
        return copy;
    }
}